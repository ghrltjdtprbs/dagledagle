name: Deploy to Amazon ECS (Production)

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: dagledagle-repo
  ECS_SERVICE: dagledagle-task-service-rwd6qr89
  ECS_CLUSTER: dagledagle-cluster
  ECS_TASK_DEFINITION: .aws/prod-dagledagle-task.json
  CONTAINER_NAME: dagledagle-container

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::891662392777:role/dagledagle-githubaction-role
          role-session-name: prodSessionName
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Render updated ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.image }}
          environment-variables: |
            NODE_ENV=production
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}
            PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}
            PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
            PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            PROD_DB_DATABASE=${{ secrets.PROD_DB_DATABASE }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
